/* vzorový projekt (sem pište stručný popis projektu)

*/

#include "stm8s.h"
#include "milis.h"
#include "swspi.h"

 
uint16_t sekundy=0; 
uint16_t desitky=0;
uint16_t minuty=0;
uint16_t desmin=0;
uint16_t time=0;

uint8_t stoji=0;
uint8_t jede=1;
uint8_t stav=0;
uint8_t tlacitko=0;
uint8_t tlacitko_mezicas=0;
uint8_t tlacitko_reset=0;
uint8_t reset=0;

void sleduj_tlacitko(void);
void sleduj_tlacitko_mezicas(void);
void sleduj_tlacitko_reset(void);
void proces_stopky(void);
void zaklad(void);

void main(void){
CLK_HSIPrescalerConfig(CLK_PRESCALER_HSIDIV1); // 16MHz z interního RC oscilátoru
init_milis(); 
GPIO_Init(GPIOD, GPIO_PIN_3,GPIO_MODE_IN_PU_NO_IT); //START/STOP
GPIO_Init(GPIOC, GPIO_PIN_4,GPIO_MODE_IN_PU_NO_IT); //MEZIČAS
GPIO_Init(GPIOE, GPIO_PIN_4,GPIO_MODE_IN_PU_NO_IT); //RESET

stav=stoji;

swspi_init();
		swspi_tx16(0x0c<<8 | 0b00000001); 	//shut down
		swspi_tx16(0x0b<<8 | 0b00000111);		//scan limit
		swspi_tx16(0x09<<8 | 0b11111111);		//decode mode
		swspi_tx16(0x0a<<8 | 0b00000011); 	//jas
		

zaklad();

	while (1){
		sleduj_tlacitko();
		sleduj_tlacitko_mezicas();
		sleduj_tlacitko_reset();
		proces_stopky();
	}
}


void sleduj_tlacitko(void){	//start/stop
	static uint8_t stav_tlac=1;
	static uint16_t last_time=0;
	if(milis()-last_time>=10){
		last_time = milis();
		if(GPIO_ReadInputPin(GPIOD,GPIO_PIN_3)==RESET && stav_tlac==1 && stav==stoji) {				//start
			stav_tlac=0;
			stav=jede;
		}
		if(GPIO_ReadInputPin(GPIOD,GPIO_PIN_3)!= RESET && stav_tlac==0) {
			stav_tlac=1;
		}
		if(GPIO_ReadInputPin(GPIOD,GPIO_PIN_3)==RESET && stav_tlac==1 && stav==jede) {			//stop
			stav_tlac=0;
			stav=stoji;
		}
		if(GPIO_ReadInputPin(GPIOD,GPIO_PIN_3)!= RESET && stav_tlac==0) {
			stav_tlac=1;
		}
	}
}

void sleduj_tlacitko_mezicas(void){	//mezičas
	static uint8_t stav_tlac=1;
	static uint16_t last_time=0;
	if(milis()-last_time>=10){
		last_time = milis();
		if(GPIO_ReadInputPin(GPIOC,GPIO_PIN_4)==RESET && stav_tlac==1 && stav==jede) {
			stav_tlac=0;
			tlacitko_mezicas=1;
		}
		if(GPIO_ReadInputPin(GPIOC,GPIO_PIN_4)!= RESET && stav_tlac==0) {
			stav_tlac=1;
		}
	}
}

void sleduj_tlacitko_reset(void){	//reset
	static uint8_t stav_tlac=1;
	static uint16_t last_time=0;
	if(milis()-last_time>=50){
		last_time = milis();
		if(GPIO_ReadInputPin(GPIOE,GPIO_PIN_4)==RESET && stav_tlac==1 && stav==stoji) {
			stav_tlac=0;
			tlacitko_reset=1;
		}
		if(GPIO_ReadInputPin(GPIOE,GPIO_PIN_4)!= RESET && stav_tlac==0) {
			stav_tlac=1;
		}
	}
}




void proces_stopky(void){
	if(stav==jede){						//start
			
		
		if ((milis()-time)>=1000){
			sekundy++;
			if(sekundy>9){
				sekundy=0;
				desitky++;
				if(desitky>5){
					desitky=0;
					minuty++;
					if(minuty>9){
						minuty=0;
						desmin++;
					}	
				}
			}
			swspi_init();
				swspi_tx16(0x01<<8 | sekundy);
				swspi_tx16(0x02<<8 | desitky);
				swspi_tx16(0x03<<8 | minuty | 0b10000000);
				swspi_tx16(0x04<<8 | desmin);
			
			time=milis();	
		}
			
		
	}
	if(stav==stoji){			//stop
		swspi_init();
			swspi_tx16(0x01<<8 | sekundy);
			swspi_tx16(0x02<<8 | desitky);
			swspi_tx16(0x03<<8 | minuty | 0b10000000);
			swspi_tx16(0x04<<8 | desmin);
			
	}
	
	if(stav==jede && tlacitko_mezicas==1){				//mezicas
		tlacitko_mezicas=0;		
		swspi_init();
			swspi_tx16(0x05<<8 | sekundy);
			swspi_tx16(0x06<<8 | desitky);
			swspi_tx16(0x07<<8 | minuty | 0b10000000);
			swspi_tx16(0x08<<8 | desmin);
		
	}
	
	if(stav==stoji && tlacitko_reset==1){	//reset
		tlacitko_reset=0;
		sekundy=0;
		desitky=0;
		minuty=0;
		desmin=0;
		zaklad();
		
	}
}

void zaklad(void){
	stav=stoji;
	swspi_init();
		swspi_tx16(0x01<<8 | 0);
		swspi_tx16(0x02<<8 | 0);
		swspi_tx16(0x03<<8 | 0);
		swspi_tx16(0x04<<8 | 0);
		swspi_tx16(0x05<<8 | 0);
		swspi_tx16(0x06<<8 | 0);
		swspi_tx16(0x07<<8 | 0);
		swspi_tx16(0x08<<8 | 0);
		swspi_tx16(0x03<<8 | 0b10000000);		//tečka
		swspi_tx16(0x07<<8 | 0b10000000);
}

// pod tímto komentářem nic neměňte 
#ifdef USE_FULL_ASSERT

/**
  * @brief  Reports the name of the source file and the source line number
  *   where the assert_param error has occurred.
  * @param file: pointer to the source file name
  * @param line: assert_param error line source number
  * @retval : None
  */
void assert_failed(u8* file, u32 line)
{ 
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */

  /* Infinite loop */
  while (1)
  {
  }
}
#endif